#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2011, Greg Baker.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

""" No bullshit distributed dropbox clone """

import sys, os
import optparse
import subprocess
import collections
import ConfigParser

#import datetime
#import re
#import tempfile
#import sqlite3
# TODO Break out each command to a git like command structure
# TODO Handle configuration in ~/.yafs.d/config
# TODO Maintain a global list of yafs dirs in .yafs.d
# TODO Create a yafs-daemon to handle synchronizing each of the dirs.

TREE_NAME = '.yafs'

class PrinterException(Exception):
    """ A simple exception that prints itself out. """
    def __init__(self, value):
        Exception.__init__(self)
        self.value = value
    def __str__(self):
        return repr(self.value)
    
class BadWorkingTree(PrinterException):
    """ An exception that involves a working tree somehow. """
    pass

class InvalidArguments(Exception):
    """ An exception that signifies an error with a command """
    pass

class Remote(collections.namedtuple('Remote', 'name url')):
    pass

class RemoteConfig(ConfigParser.RawConfigParser):
    def __init__(self, remotefile):
        ConfigParser.RawConfigParser.__init__(self)
        self.readfp(remotefile)
        self.remotes = []
        for section in self.sections():
            if self.has_option(section, 'url'):
                name = section
                url = self.get(section, 'url')
                self.remotes.append(Remote(name=name, url=url))

    def add(self, remote):
        if not self.has_section(remote.name):
            self.add_section(remote.name)
        self.set(remote.name, 'url', remote.url)

    def remove(self, name):
        if self.has_section(name):
            self.remove_section(name)

def is_tree(directory):
    """ Determine if we're in a working tree. """
    while not os.path.ismount(directory):
        for subdir in os.listdir(directory):
            if TREE_NAME == os.path.basename(subdir):
                return True
        directory = os.path.dirname(directory)
    for subdir in os.listdir(directory):
        if TREE_NAME == os.path.basename(subdir):
            return True
    return False

def get_root(directory):
    """ return the root directory (our working tree) """
    while not os.path.ismount(directory):
        for subdir in os.listdir(directory):
            if TREE_NAME == os.path.basename(subdir):
                return os.path.abspath(subdir)
        directory = os.path.dirname(directory)
    for subdir in os.listdir(directory):
        if TREE_NAME == os.path.basename(subdir):
            return os.path.abspath(subdir)
    raise BadWorkingTree('This directory is not a valid working tree')
    
def init(opts, args):
    """ Generate a yafs directory """
    """ TODO: Catch OSError """
    if is_tree(opts.directory):
        raise BadWorkingTree('%s is already a working tree! bailing out.')
    os.mkdir(os.path.join(opts.directory, TREE_NAME))
    os.mkdir(os.path.join(opts.directory, TREE_NAME, 'backup'))
    os.mkdir(os.path.join(opts.directory, TREE_NAME, 'sync'))
    rconf = open(os.path.join(opts.directory, TREE_NAME, 'remotes'), 'w+')
    rconf.close()

def increment(opts, args):
    """ Generate a new rdiff-backup incremental backup """
    subprocess.check_call(['rdiff-backup',
        '--exclude', opts.tree,
        opts.directory,
        opts.backup])

def remote(opts, args):
    """
    Add or remove references to remote servers.
    """
    def usage():
        """ Print how to use this then raise an exception """
        print 'yafs remote add name rsync_path'
        print 'yafs remote remove name'
        print 'yafs remote list'
        raise InvalidArguments('remote')
    if args:
        command = args[0]
    else:
        usage()

    with open(opts.remote) as remotefile:
        rconf = RemoteConfig(remotefile)

    if command == 'add':
        if len(args) >= 3:
            rconf.add(Remote(name=args[1], url=args[2]))
            with open(opts.remote, 'w+') as remotefile:
                rconf.write(remotefile)
        else:
            usage()
    elif command == 'remove': 
        if len(args) >= 2:
            rconf.remove(args[1])
            with open(opts.remote, 'w+') as remotefile:
                rconf.write(remotefile)
        else:
            usage()
    elif command == 'list':
        for remote in rconf.remotes:
            print "%s %s" % (remote.name, remote.url)
    else:
        usage()

def get_remotes(opts, args):
    """
    Retrieve a list of remote servers from internal storage.
    """
    with open(opts.remote) as remotefile:
        return RemoteConfig(remotefile).remotes[:]

def rsync(src, dest):
    subprocess.check_call(['rsync',
        '--delay-updates',
        #'--delete-delay',
        '--partial-dir=%s' % (os.path.join(dest, '.yafsync')),
        '--exclude', TREE_NAME,
        '-slurpt',
        os.path.join(src, ''),
        os.path.join(dest, '')])

def push(opts, args):
    """
    Push to each of the remote servers this directory.
    Remote folders are set with the .yafs command
    """
    # TODO Pick a remote based on name
    for remote in get_remotes(opts, args):
        rsync(opts.directory, remote.url)

def pull(opts, args):
    """
    Pull from each of the remote servers of this directory.
    Remote folders are set with the .yafs command
    """
    # TODO pick a remote based on name
    for remote in get_remotes(opts, args):
        rsync(remote.url, opts.directory)

def get_options():
    """ Retrieve and parse command-line options into options and arguments """
    optparser = optparse.OptionParser(
        usage='%prog [Options]',
        version='%prog 0.0')
    (options, args) = optparser.parse_args()
    if (len(args) == 0 or args[0] == 'help'):
        optparser.print_help()
        sys.exit(0)
    command = args[0]
    print command
    options.command = command
    if options.command == 'init':
        if len(args) == 2:
            options.directory = args[1]
        else:
            options.directory = os.getcwd()
    else:
        options.tree = get_root(os.getcwd())
        options.directory = os.path.dirname(options.tree)
        options.backup = os.path.join(options.tree, 'backup')
        options.remote = os.path.join(options.tree, 'remotes')

    return (options, args[1:])

def sync(opts, args):
    """ 
    Synchronize this folder with each of the others.
    """
    increment(opts, args)
    push(opts, args)
    pull(opts, args)

def clone(opts, args):
    """
    Creates a new folder with contents cloned from the given path, referencing
    that path
    """
    pass
# TODO init
# TODO add remote
# TODO pull
# TODO increment

def main():
    """Run through the arguments, then run through user input until we're out"""
    (opts, args) = get_options()
    commands = {
        'init' : init,
        'increment' : increment,
        'push' : push,
        'pull' : pull,
        'remote' : remote,
        'sync' : sync,
        #'list' : list_incr,
        #'checkout' : checkout,
        #'clone' : clone,
        #'daemon' : daemon,
        #'ping' : ping
    }

    try:
        if opts.command in commands:
            commands[opts.command](opts, args)
        else:
            pass
            # Try a subprocess?
    except BadWorkingTree as exc:
        print "bad working tree: ", exc
    except InvalidArguments as exc:
        print "Couldn't recognize your command: ", exc
        
# TODO catch the CalledProcessError from increment
# TODO catch the OSError
# TODO catch ValueError
# TODO catch InvalidArguments
# TODO catch BadWorkingTree

if(__name__ == "__main__"):
    sys.exit(main())

